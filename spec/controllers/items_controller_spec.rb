require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ItemsController do

  let(:project) { Project.create!(name: 'test', description: 'test') }
  let(:valid_attributes) { { description: 'MyText', project_id: project.id, opened: true } }
  let(:valid_session) { {} }

  describe 'GET index' do
    it 'assigns all items as @items' do
      item = Item.create! valid_attributes
      get :index, {project_id: project.id}, valid_session
      # assigns(:items).should eq([item])

      expect(assigns(:items_opened)).to eq([item])
    end
  end

  describe 'GET show' do
    it 'assigns the requested item as @item' do
      item = Item.create! valid_attributes
      get :show, {project_id: project.id, id: item.to_param}, valid_session
      assigns(:item).should eq(item)
    end
  end

  describe 'GET new' do
    it 'assigns a new item as @item' do
      get :new, {project_id: project.id}, valid_session
      assigns(:item).should be_a_new(Item)
    end
  end

  describe 'GET edit' do
    it 'assigns the requested item as @item' do
      item = Item.create! valid_attributes
      get :edit, {project_id: project.id, id: item.to_param}, valid_session
      assigns(:item).should eq(item)
    end
  end

  describe 'POST create' do
    describe 'with valid params' do
      it 'creates a new Item' do
        expect {
          post :create, {project_id: project.id, item: valid_attributes}, valid_session
        }.to change(Item, :count).by(1)
      end

      it 'assigns a newly created item as @item' do
        post :create, {project_id: project.id, item: valid_attributes}, valid_session
        assigns(:item).should be_a(Item)
        assigns(:item).should be_persisted
      end

      it 'redirects to the created item' do
        post :create, {project_id: project.id, item: valid_attributes}, valid_session
        response.should redirect_to(project_item_path(project, Item.last))
      end
    end

    describe 'with invalid params' do

      before do
        Item.any_instance.stub(:save).and_return(false)
        post :create, {project_id: project.id, item: { description: 'invalid value' }}, valid_session
      end

      it 'assigns a newly created but unsaved item as @item' do
        assigns(:item).should be_a_new(Item)
      end

      it 're-renders the \'new\' template' do
        response.should render_template('new')
      end
    end
  end

  describe 'PUT update' do
    describe 'with valid params' do
      let(:item) { Item.create!(valid_attributes) }

      it 'updates the requested item' do
        Item.any_instance.should_receive(:update).with({ "description" => 'MyText' })
        put :update, {project_id: project.id, id: item.to_param, item: { "description" => 'MyText' }}, valid_session
      end

      it 'assigns the requested item as @item' do
        put :update, {project_id: project.id, id: item.to_param, item: valid_attributes}, valid_session
        assigns(:item).should eq(item)
      end

      it 'redirects to the item' do
        put :update, {project_id: project.id, id: item.to_param, item: valid_attributes}, valid_session
        response.should redirect_to(project_item_path(project, item))
      end
    end

    describe 'with invalid params' do

      let(:item) { Item.create!(valid_attributes) }

      it 'assigns the item as @item' do
        # Trigger the behavior that occurs when invalid params are submitted
        Item.any_instance.stub(:save).and_return(false)
        put :update, {project_id: project.id, id: item.to_param, item: { description: 'invalid value' }}, valid_session
        assigns(:item).should eq(item)
      end

      it 're-renders the edit template' do
        # Trigger the behavior that occurs when invalid params are submitted
        Item.any_instance.stub(:save).and_return(false)
        put :update, {project_id: project.id, id: item.to_param, item: { description: 'invalid value' }}, valid_session
        response.should render_template('edit')
      end
    end
  end

  describe 'DELETE destroy' do
    it 'destroys the requested item' do
      item = Item.create! valid_attributes
      expect {
        delete :destroy, {project_id: project.id, id: item.to_param}, valid_session
      }.to change(Item, :count).by(-1)
    end

    it 'redirects to the items list' do
      item = Item.create! valid_attributes
      delete :destroy, {project_id: project.id, id: item.to_param}, valid_session
      response.should redirect_to(project_items_url(project))
    end
  end

end
